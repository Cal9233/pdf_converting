#!/usr/bin/env python3
"""
PDF to Excel Converter - Standalone Executable
"""

import os
import sys
from datetime import datetime
import pandas as pd
import pdfplumber
import re

# Configuration
VALID_CARDHOLDERS = {
    'LUIS RODRIGUEZ',
    'JOSE RODRIGUEZ', 
    'ISABEL RODRIGUEZ',
    'GABRIEL TRUJILLO',
    'OCOMAR ENTERPRISES',
    'JUAN LUIS RODRIGUEZ',
    'PULAK UNG',
    'RODRIGUEZ GUTIERREZ'
}

BUSINESS_INDICATORS = [
    'AIRLINES', 'AIRLINE', 'AIRWAYS', 'AIR',
    'CARD', 'CARDS', 'GIFT',
    'MERCHANDISE', 'GENERAL',
    'STORES', 'STORE', 'DISCOUNT',
    'VARIETY', 'RETAIL'
]

class PDFConverter:
    def __init__(self):
        self.base_dir = os.path.dirname(os.path.abspath(__file__))
        self.input_dir = os.path.join(self.base_dir, 'Convert')
        self.output_dir = os.path.join(self.base_dir, 'Excel')
        
        # Create directories
        for dir_path in [self.input_dir, self.output_dir]:
            os.makedirs(dir_path, exist_ok=True)
        
        for subdir in ['amex', 'chase', 'other']:
            os.makedirs(os.path.join(self.input_dir, subdir), exist_ok=True)
    
    def extract_cardholder_name(self, text):
        """Extract cardholder name if valid."""
        text = text.strip()
        if text in VALID_CARDHOLDERS:
            return text
        for valid_name in VALID_CARDHOLDERS:
            if valid_name in text:
                return valid_name
        return None
    
    def is_business_name(self, text):
        """Check if text contains business indicators."""
        text_upper = text.upper()
        for indicator in BUSINESS_INDICATORS:
            if indicator in text_upper:
                return True
        return False
    
    def parse_amount(self, text):
        """Extract amount from text."""
        matches = re.findall(r'\$?[\d,]+\.?\d{0,2}', text)
        for match in reversed(matches):
            amount_str = match.replace('$', '').replace(',', '')
            try:
                return float(amount_str)
            except ValueError:
                continue
        return None
    
    def clean_merchant(self, merchant):
        """Clean merchant name."""
        # Remove extra spaces
        merchant = ' '.join(merchant.split())
        
        # Remove location info
        merchant = re.sub(r'\s+\d{12,}.*$', '', merchant)
        merchant = re.sub(r'\s+\d{3}[-.]?\d{3}[-.]?\d{4}.*$', '', merchant)
        merchant = re.sub(r'\s+\w+\.\w+\.?\w*.*$', '', merchant)
        
        # Remove city/state
        cities = '(San Francisco|San Jose|San Bruno|San Mateo|Daly City|South San Fra|Burlingame|Vallejo|Oakland|Berkeley|Sacramento|Los Angeles|Las Vegas|West Hollywood)'
        merchant = re.sub(rf'\s+{cities}.*$', '', merchant, flags=re.IGNORECASE)
        merchant = re.sub(r'\s+[A-Z]{2}$', '', merchant)
        
        # Remove prefixes
        for prefix in ['TST* ', 'TST*', 'SPO*', 'SQ *']:
            if merchant.startswith(prefix):
                merchant = merchant[len(prefix):].strip()
        
        return merchant.strip()
    
    def parse_amex_pdf(self, pdf_path):
        """Parse AmEx PDF."""
        transactions = []
        current_cardholder = None
        
        try:
            with pdfplumber.open(pdf_path) as pdf:
                for page in pdf.pages:
                    text = page.extract_text()
                    if not text:
                        continue
                    
                    lines = text.split('\n')
                    for line in lines:
                        line = line.strip()
                        if not line:
                            continue
                        
                        # Check for cardholder name
                        if line.isupper() and len(line.split()) <= 3:
                            name = self.extract_cardholder_name(line)
                            if name and not self.is_business_name(line):
                                current_cardholder = name
                                continue
                        
                        # Parse transaction (MM/DD or MM/DD/YY pattern)
                        match = re.match(r'^(\d{2}/\d{2}(?:/\d{2})?)\s+(.+?)\s+(\$?[\d,]+\.\d{2})$', line)
                        if match and current_cardholder:
                            date_str = match.group(1)
                            merchant = match.group(2)
                            amount = self.parse_amount(match.group(3))
                            
                            if amount:
                                # Parse date
                                if len(date_str) == 5:  # MM/DD
                                    date_str += '/24'  # Add year
                                try:
                                    date = datetime.strptime(date_str, '%m/%d/%y').strftime('%m/%d/%Y')
                                    transactions.append({
                                        'Name': current_cardholder,
                                        'Date': date,
                                        'Merchant': self.clean_merchant(merchant),
                                        'Amount': amount
                                    })
                                except:
                                    pass
        except Exception as e:
            print(f"    Error parsing {os.path.basename(pdf_path)}: {str(e)}")
        
        return transactions
    
    def parse_chase_pdf(self, pdf_path):
        """Parse Chase PDF."""
        transactions = []
        current_cardholder = None
        
        try:
            with pdfplumber.open(pdf_path) as pdf:
                for page in pdf.pages:
                    text = page.extract_text()
                    if not text:
                        continue
                    
                    lines = text.split('\n')
                    for i, line in enumerate(lines):
                        line = line.strip()
                        if not line:
                            continue
                        
                        # Check for cardholder name (before Account Number)
                        if i < len(lines) - 1 and 'Account Number' in lines[i + 1]:
                            name = self.extract_cardholder_name(line)
                            if name:
                                current_cardholder = name
                        
                        # Parse transaction
                        match = re.match(r'^(\d{2}/\d{2})\s+(.+?)\s+(-?\$?[\d,]+\.\d{2})$', line)
                        if match and current_cardholder:
                            date_str = match.group(1) + '/2024'
                            merchant = match.group(2).strip()
                            
                            # Remove leading & or 8
                            if merchant.startswith('& '):
                                merchant = merchant[2:]
                            elif merchant.startswith('8 '):
                                merchant = merchant[2:]
                            
                            amount = self.parse_amount(match.group(3).replace('-', ''))
                            
                            if amount:
                                try:
                                    date = datetime.strptime(date_str, '%m/%d/%Y').strftime('%m/%d/%Y')
                                    transactions.append({
                                        'Name': current_cardholder,
                                        'Date': date,
                                        'Merchant': self.clean_merchant(merchant),
                                        'Amount': amount
                                    })
                                except:
                                    pass
        except Exception as e:
            print(f"    Error parsing {os.path.basename(pdf_path)}: {str(e)}")
        
        return transactions
    
    def run(self):
        """Run the conversion."""
        print("\n" + "="*60)
        print("       PDF to Excel Converter")
        print("="*60)
        print("\nChecking for PDF files...")
        
        total_processed = 0
        
        for subdir in ['amex', 'chase', 'other']:
            subdir_path = os.path.join(self.input_dir, subdir)
            pdf_files = [f for f in os.listdir(subdir_path) if f.lower().endswith('.pdf')]
            
            if not pdf_files:
                continue
            
            print(f"\n[{subdir.upper()}] Found {len(pdf_files)} PDF files")
            all_transactions = []
            
            for pdf_file in pdf_files:
                pdf_path = os.path.join(subdir_path, pdf_file)
                print(f"  Processing: {pdf_file}")
                
                try:
                    if subdir == 'amex' or (subdir == 'other' and 'amex' in pdf_file.lower()):
                        transactions = self.parse_amex_pdf(pdf_path)
                    elif subdir == 'chase' or (subdir == 'other' and 'chase' in pdf_file.lower()):
                        transactions = self.parse_chase_pdf(pdf_path)
                    else:
                        transactions = self.parse_amex_pdf(pdf_path)  # Default
                    
                    all_transactions.extend(transactions)
                    print(f"    ✓ Extracted {len(transactions)} transactions")
                    total_processed += 1
                except Exception as e:
                    print(f"    ✗ Error: {str(e)}")
            
            if all_transactions:
                # Save to Excel - ONE file per TYPE with ALL transactions
                df = pd.DataFrame(all_transactions)
                df = df[['Name', 'Date', 'Merchant', 'Amount']]
                df = df.sort_values(['Name', 'Date'])
                
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                output_file = os.path.join(self.output_dir, f'{subdir}_combined_{timestamp}.xlsx')
                
                with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
                    df.to_excel(writer, sheet_name='Transactions', index=False)
                    
                    worksheet = writer.sheets['Transactions']
                    for col in ['A', 'B', 'C', 'D']:
                        worksheet.column_dimensions[col].width = [25, 12, 50, 12][ord(col) - 65]
                    
                    for row in range(2, len(df) + 2):
                        worksheet[f'D{row}'].number_format = '$#,##0.00'
                
                print(f"\n✅ Created {subdir.upper()} Excel with {len(df)} total transactions")
                print(f"   Saved to: {os.path.basename(output_file)}")
        
        if total_processed == 0:
            print("\n❌ No PDF files found in Convert folder!")
            print("\nPlease place your PDFs in:")
            print("  - Convert/amex/ for AmEx statements")
            print("  - Convert/chase/ for Chase statements")
            print("  - Convert/other/ for other PDFs")
        else:
            print(f"\n{'='*60}")
            print(f"✅ Conversion complete! Processed {total_processed} PDF files")
            print(f"   Check the Excel folder for your combined files")
            print(f"{'='*60}")

if __name__ == "__main__":
    try:
        converter = PDFConverter()
        converter.run()
    except Exception as e:
        print(f"\n❌ Error: {str(e)}")
        print("\nPlease ensure you have installed the required packages:")
        print("  pip install pandas openpyxl pdfplumber")
    
    input("\nPress Enter to exit...")